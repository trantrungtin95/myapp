<p id="notice"><%= notice %></p>
<div id='product-id' data-id='<%= @product.id %>'></div>
<% if LastPage.where(user_id: current_user.id, product_id: @product.id).present? %>
   <div id='last-page' data-id='<%= LastPage.where(user_id: current_user.id, product_id: @product.id).first.page_number %>'></div>
   <% else %>
   <div id='last-page' data-id='1'></div>
<% end %>
<p>
  <strong>Title:</strong>
  <%= @product.title %>
  
</p>


<p>
  <strong>Description:</strong>
  <%= @product.description %>
</p>

<p>
  <strong>Image url:</strong>
  <%= image_tag @product.image_url, class: 'img-fluid' %>
</p>

<p>
  <strong>Cover:</strong>
  <% if @product.cover.present? %>
  <%= image_tag @product.cover, class: "cover-img" %>
  <% end %>
</p>

<p>
File: <%= link_to 'link download', rails_blob_path(@product.pdf, disposition: "attachment") if @product.pdf.present? %>
</p>

<% if @product.pdf.present? %>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.5.207/pdf.worker.min.js"></script>

  <div>
    <button id="prev">Previous</button>
    <button id="next">Next</button>
    &nbsp; &nbsp;
    <span>Page: <span id="page_num" ></span> / <span id="page_count"></span></span>
    <button id="bookmark">Bookmark</button>

    <nav>
    List Bookmark:
        <% @product.bookmarks(current_user).each do|bookmark|%>
          <button class="list_bookmark" data-page-number='<%= bookmark.page_number %>'>
            <%= bookmark.page_number %>
          </button>
        <% end %>
    </nav>
  </div>

  <div id='pdf-content'>
    <canvas id="the-canvas" style="border: 1px solid black; direction: ltr;"></canvas>
    
    <div id='note-content'>
    <div id='new-note'></div>
      <div>
        <h4>
          <%= link_to "Add Note: ", new_product_note_path(@product), remote: true %>
        </h4>
      </div>
      <div id='notes-list'>
        <%= render @product.notes.order('created_at desc') %>
      </div>
    </div>
  </div>

<% end %>

<p>
<strong>Audio:</strong>
<% if @product.audio.present? %>
  <audio controls>
    <source src="<%= rails_blob_path(@product.audio) %>" type="audio/mpeg">
    Your browser does not support the audio element.
  </audio>
<% end%>
</p>

<p>
  <strong>Price:</strong>
  <%= @product.price %>
</p>
<p>View:<%= @product.daxem %></p>

<% if current_user.id == @product.user_id %>
<%= link_to 'Edit', edit_product_path(@product), class: 'btn btn-primary' %>
<% end %>
<%= link_to 'Back', request.referer, class: 'btn btn-warning' %>

<p>
    <div>
    <% if @product.favorite_by?(current_user)%>
        <%= link_to 'Dis Favorite', disfavorite_product_path(@product), class: 'btn btn-secondary', data: { confirm: 'Are you sure?' }%>
      <% else %>
        <%= link_to 'Favorite', favorite_product_path(@product), class: 'btn btn-success' %>
      <% end %>
      
    </div>
</p>

<p>
  <% if current_user.id == @product.user_id %>
    
        <% if @product.public %>
             <strong>Public</strong>
             <%= link_to 'Set private', private_product_path(@product)%>
          <% else %>
            <strong>Private</strong>
            <%= link_to 'Set public', public_product_path(@product)%>
           
          <% end %>
  <% end %>
</p>

<p>
  <div id='new-review'></div>
    <div>
      <%= link_to "Add Review", new_product_review_path(@product), remote: true %>
    </div>
</p>



<div class="row">

  <div class="col-md-8">



<div id='review-list'>
  <%= render @product.reviews.order('created_at desc') %>
</div>


  

  </div>
</div>


<script id="script">
  var  url= '<%= rails_blob_path(@product.pdf) if @product.pdf.present? %>';
  // var url = 'http://localhost:3000/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDRG9JYTJWNVNTSWhhbUV5YW1wbGVqaGtjMkpxT1dOa2QyVnJibmMxZG1NNGQzaDVNQVk2QmtWVU9oQmthWE53YjNOcGRHbHZia2tpWTJsdWJHbHVaVHNnWm1sc1pXNWhiV1U5SW10bGVXSnZZWEprTFhOb2IzSjBZM1YwY3kxdFlXTnZjeTV3WkdZaU95Qm1hV3hsYm1GdFpTbzlWVlJHTFRnbkoydGxlV0p2WVhKa0xYTm9iM0owWTNWMGN5MXRZV052Y3k1d1pHWUdPd1pVT2hGamIyNTBaVzUwWDNSNWNHVkpJaFJoY0hCc2FXTmhkR2x2Ymk5d1pHWUdPd1pVIiwiZXhwIjoiMjAyMC0wOC0yMlQwODoxMjoyMi4xMDNaIiwicHVyIjoiYmxvYl9rZXkifX0=--a9136cdebe8db0f7d3a9d8710acbf32d9269efea/keyboard-shortcuts-macos.pdf?content_type=application%2Fpdf&disposition=inline%3B+filename%3D%22keyboard-shortcuts-macos.pdf%22%3B+filename%2A%3DUTF-8%27%27keyboard-shortcuts-macos.pdf';
  
  console.log(url);
  // The workerSrc property shall be specified.
  //
  if (url.length > 0) { 
  pdfjsLib.GlobalWorkerOptions.workerSrc =
    'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.5.207/pdf.worker.min.js';
  
  //
  // Asynchronous download PDF
  //
  var pdfDoc = null,
    pageNum = $('#last-page').data('id'),
    pageRendering = false,
    pageNumPending = null,
    scale = 1.5,
    canvas = document.getElementById('the-canvas'),
    ctx = canvas.getContext('2d');

/**
 * Get page info from document, resize canvas accordingly, and render page.
 * @param num Page number.
 */
function renderPage(num) {
  pageRendering = true;
  // Using promise to fetch the page
  pdfDoc.getPage(num).then(function(page) {
    var viewport = page.getViewport({scale: scale});
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    // Render PDF page into canvas context
    var renderContext = {
      canvasContext: ctx,
      viewport: viewport
    };
    var renderTask = page.render(renderContext);

    // Wait for rendering to finish
    renderTask.promise.then(function() {
      pageRendering = false;
      if (pageNumPending !== null) {
        // New page rendering is pending
        renderPage(pageNumPending);
        pageNumPending = null;
      }
    });
  });
  // Update page counters
  document.getElementById('page_num').textContent = num;
}

/**
 * If another page rendering in progress, waits until the rendering is
 * finised. Otherwise, executes rendering immediately.
 */
function queueRenderPage(num) {
  if (pageRendering) {
    pageNumPending = num;
  } else {
    renderPage(num);
  }
}

/**
 * Displays previous page.
 */
function onPrevPage() {
  if (pageNum <= 1) {
    return;
  }
  pageNum--;
  queueRenderPage(pageNum);
  
  var productId = $('#product-id').data('id');
  $.post(`/products/${productId}/last_page`, { last_page: pageNum }, function(data) {
    console.log(data);
  } ) 

}
document.getElementById('prev').addEventListener('click', onPrevPage);

/**
 * Displays next page.
 */
function onNextPage() {
  if (pageNum >= pdfDoc.numPages) {
    return;
  }
  pageNum++;
  queueRenderPage(pageNum);

  // call ajax to save last page
  var productId = $('#product-id').data('id');
  $.post(`/products/${productId}/last_page`, { last_page: pageNum }, function(data) {
    console.log(data);
  } )
}
document.getElementById('next').addEventListener('click', onNextPage);

function onBookmark(num) {
  var productId = $('#product-id').data('id');
  $.post(`/products/${productId}/bookmark`, { page_number: pageNum }, function(data) {
    console.log(data);
  } )
  
}
document.getElementById('bookmark').addEventListener('click', onBookmark);

function onrenderBookmark() {
  pageNum = $(this).data('page-number');
  queueRenderPage(pageNum);
  console.log(data);  
}
$('button.list_bookmark').on('click', onrenderBookmark);

/**
$('button.list_bookmark-').on('click', function(event) {
  var target = $(event.target);

})
*/

/**
 * Asynchronously downloads PDF.
 */
pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
  pdfDoc = pdfDoc_;
  document.getElementById('page_count').textContent = pdfDoc.numPages;

  // Initial/first page rendering
  renderPage(pageNum);
});

  }
</script>

